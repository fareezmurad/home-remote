#include "utils.h"

// 'QR Code', 64x64px
const unsigned char bitmap_QR_Code[] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0xe6, 0xff, 0x01, 0x7e, 0x00, 0xe0,
  0x07, 0x00, 0xe6, 0xff, 0x01, 0x7e, 0x00, 0xe0, 0xe7, 0x7f, 0x9e, 0x01, 0x66, 0x7e, 0xfe, 0xe7,
  0xe7, 0x7f, 0x9e, 0x01, 0x66, 0x7e, 0xfe, 0xe7, 0x67, 0x60, 0x06, 0x7e, 0x80, 0x67, 0x06, 0xe6,
  0x67, 0x60, 0x06, 0x7e, 0x80, 0x67, 0x06, 0xe6, 0x67, 0x60, 0x1e, 0x66, 0x1e, 0x66, 0x06, 0xe6,
  0x67, 0x60, 0x1e, 0x66, 0x1e, 0x66, 0x06, 0xe6, 0x67, 0x60, 0x1e, 0x1e, 0x18, 0x7e, 0x06, 0xe6,
  0x67, 0x60, 0x1e, 0x1e, 0x18, 0x7e, 0x06, 0xe6, 0xe7, 0x7f, 0x66, 0xe6, 0x79, 0x66, 0xfe, 0xe7,
  0xe7, 0x7f, 0x66, 0xe6, 0x79, 0x66, 0xfe, 0xe7, 0x07, 0x00, 0x66, 0x66, 0x66, 0x66, 0x00, 0xe0,
  0x07, 0x00, 0x66, 0x66, 0x66, 0x66, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x7f, 0x60, 0xfe, 0xff, 0xff,
  0xff, 0xff, 0xff, 0x7f, 0x60, 0xfe, 0xff, 0xff, 0x67, 0x7e, 0x78, 0x06, 0xfe, 0xe1, 0x79, 0xe6,
  0x67, 0x7e, 0x78, 0x06, 0xfe, 0xe1, 0x79, 0xe6, 0x07, 0x98, 0x07, 0x06, 0x1e, 0x00, 0xf8, 0xe1,
  0x07, 0x98, 0x07, 0x06, 0x1e, 0x00, 0xf8, 0xe1, 0x67, 0x1e, 0xf8, 0xff, 0x79, 0x60, 0x00, 0xe6,
  0x67, 0x1e, 0xf8, 0xff, 0x79, 0x60, 0x00, 0xe6, 0x67, 0x80, 0x01, 0x80, 0xff, 0x81, 0x87, 0xff,
  0x67, 0x80, 0x01, 0x80, 0xff, 0x81, 0x87, 0xff, 0x1f, 0x1e, 0x7e, 0x86, 0xe1, 0x61, 0xf8, 0xe7,
  0x1f, 0x1e, 0x7e, 0x86, 0xe1, 0x61, 0xf8, 0xe7, 0x87, 0x99, 0xf9, 0xe7, 0x87, 0x61, 0xf8, 0xe1,
  0x87, 0x99, 0xf9, 0xe7, 0x87, 0x61, 0xf8, 0xe1, 0x1f, 0x7e, 0x06, 0x18, 0x86, 0x19, 0xe0, 0xe7,
  0x1f, 0x7e, 0x06, 0x18, 0x86, 0x19, 0xe0, 0xe7, 0x87, 0x87, 0x07, 0x78, 0x60, 0x60, 0xf8, 0xff,
  0x87, 0x87, 0x07, 0x78, 0x60, 0x60, 0xf8, 0xff, 0xe7, 0x67, 0x7e, 0x06, 0xfe, 0x07, 0xfe, 0xe7,
  0xe7, 0x67, 0x7e, 0x06, 0xfe, 0x07, 0xfe, 0xe7, 0x9f, 0xe1, 0x7f, 0x1e, 0x7e, 0x78, 0x78, 0xe0,
  0x9f, 0xe1, 0x7f, 0x1e, 0x7e, 0x78, 0x78, 0xe0, 0x07, 0x00, 0x60, 0xe6, 0x9f, 0xf9, 0x87, 0xe7,
  0x07, 0x00, 0x60, 0xe6, 0x9f, 0xf9, 0x87, 0xe7, 0x7f, 0xf8, 0x9f, 0x87, 0x7f, 0x66, 0xe6, 0xff,
  0x7f, 0xf8, 0x9f, 0x87, 0x7f, 0x66, 0xe6, 0xff, 0x87, 0x01, 0xe6, 0x87, 0xe1, 0x07, 0x80, 0xf9,
  0x87, 0x01, 0xe6, 0x87, 0xe1, 0x07, 0x80, 0xf9, 0xff, 0xff, 0x67, 0xfe, 0x67, 0xe6, 0x07, 0xe6,
  0xff, 0xff, 0x67, 0xfe, 0x67, 0xe6, 0x07, 0xe6, 0x07, 0x00, 0x66, 0x00, 0x66, 0x66, 0xe6, 0xe7,
  0x07, 0x00, 0x66, 0x00, 0x66, 0x66, 0xe6, 0xe7, 0xe7, 0x7f, 0xfe, 0x7f, 0xe0, 0xe1, 0xe7, 0xe7,
  0xe7, 0x7f, 0xfe, 0x7f, 0xe0, 0xe1, 0xe7, 0xe7, 0x67, 0x60, 0x1e, 0x18, 0xe6, 0x01, 0x80, 0xff,
  0x67, 0x60, 0x1e, 0x18, 0xe6, 0x01, 0x80, 0xff, 0x67, 0x60, 0xfe, 0x7f, 0xfe, 0x81, 0x07, 0xf8,
  0x67, 0x60, 0xfe, 0x7f, 0xfe, 0x81, 0x07, 0xf8, 0x67, 0x60, 0x06, 0x9e, 0x01, 0x9e, 0xe7, 0xe1,
  0x67, 0x60, 0x06, 0x9e, 0x01, 0x9e, 0xe7, 0xe1, 0xe7, 0x7f, 0x7e, 0xe6, 0x67, 0xe6, 0x81, 0xff,
  0xe7, 0x7f, 0x7e, 0xe6, 0x67, 0xe6, 0x81, 0xff, 0x07, 0x00, 0x86, 0x7f, 0xe0, 0xe7, 0x87, 0xe7,
  0x07, 0x00, 0x86, 0x7f, 0xe0, 0xe7, 0x87, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

void displayInfo() {
  const char *versionTitle = "Version: ";
  char versionInfo[20];

  strcpy(versionInfo, versionTitle);
  strcat(versionInfo, version);

  u8g2.setFont(u8g2_font_4x6_tr);
  u8g2.drawStr(0, 13, "Project: Home Remote");
  u8g2.drawStr(0, 26, versionInfo);
  u8g2.drawStr(0, 39, "Created by: beMiracle.");
  u8g2.drawStr(0, 53, "Contact: fareezmurad@yahoo.com");
}

void displayQr() {
  u8g2.setBitmapMode(1);
  u8g2.drawXBMP(32, 0, 64, 64, bitmap_QR_Code);
}

// To check display activity
int fpsCounter() {
  static unsigned long startCount = millis();
  static int frameCount = 0;
  static float fps = 0;

  frameCount++;

  unsigned long stopCount = millis();
  unsigned long durationCount = (stopCount - startCount);

  if (durationCount > 500) {
    fps = (frameCount * 1000) / durationCount;
  }
  return fps;
}

// Dummy function for testing
void underDevelopment() {
  u8g2.setFont(u8g2_font_6x13_tr);
  u8g2.drawStr(13, 37, "Under Development");
}

void exitToSleep() {
  // Optionally display a "Confirm Sleep" screen first
  // Then execute deep sleep:
  u8g2.setFont(u8g2_font_6x13_tr);
  u8g2.drawStr(5, 37, "Going to sleep...");
  u8g2.sendBuffer();
  delay(1500);
  u8g2.setPowerSave(1);
  delay(1000);
  esp_deep_sleep_start();
}